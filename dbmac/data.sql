--DB TEST HIZLI

DROP TABLE IF EXISTS diller CASCADE;
DROP TABLE IF EXISTS ulkeler CASCADE;
DROP TABLE IF EXISTS sehirler CASCADE;
DROP TABLE IF EXISTS ulke_dil CASCADE;
DROP TABLE IF EXISTS model_turleri CASCADE;
DROP TABLE IF EXISTS hastane_turleri CASCADE;
DROP TABLE IF EXISTS kullanici_turleri CASCADE;
DROP TABLE IF EXISTS seviyeler CASCADE;
DROP TABLE IF EXISTS modeller CASCADE;
DROP TABLE IF EXISTS model_ulke CASCADE;
DROP TABLE IF EXISTS model_seviye CASCADE;
DROP TABLE IF EXISTS model_hastane_turu CASCADE;
DROP TABLE IF EXISTS model_kullanici_kapsami CASCADE;
DROP TABLE IF EXISTS boyutlar CASCADE;
DROP TABLE IF EXISTS kriterler CASCADE;
DROP TABLE IF EXISTS gostergeler CASCADE;
DROP TABLE IF EXISTS gosterge_cevap_turleri CASCADE;
DROP TABLE IF EXISTS gosterge_cevap_sablonlari CASCADE;
DROP TABLE IF EXISTS gosterge_cevaplari CASCADE;
DROP TABLE IF EXISTS gosterge_cevabina_oneriler CASCADE;
DROP TABLE IF EXISTS eslesmeler CASCADE;
DROP TABLE IF EXISTS karsilanma_duzeyi CASCADE;



-- diller tablosu
-- Amaç: Desteklenen dillerin temel listesini tutar (ör: Türkçe, İngilizce, Fransızca)

CREATE TABLE diller (
    dil_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    dil_adi VARCHAR(64) NOT NULL                                
);

-- ulkeler tablosu
-- Amaç: Ülkelerin listesini tutar

CREATE TABLE ulkeler (
    ulke_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    ulke_adi VARCHAR(64)  NOT NULL                                       
);

-- sehirler tablosu
-- Amaç: Her ülkeye bağlı şehirleri tanımlar. Bölge, NUTS gibi sınıflandırma bilgileri içerir.

CREATE TABLE sehirler (
    sehir_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    ulke_id INTEGER NOT NULL,               -- FK: ulkeler tablosuna bağlanır
    sehir_adi VARCHAR(64) NOT NULL,         
    bolge_adi VARCHAR(64),         
    nuts_adi VARCHAR(5)            -- Avrupa Birliği NUTS sınıflandırması (varsa)
);

-- UlkelerDiller tablosu
-- Amaç: Her ülkenin birden fazla dili olabilir ama yalnızca bir tanesi varsayılan olabilir.

CREATE TABLE ulke_dil (
    ulke_dil_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    ulke_id INTEGER,             -- FK: ulkeler tablosu
    dil_id INTEGER,              -- FK: diller tablosu
    varsayilan BOOLEAN           -- TRUE ise ülke için varsayılan dil
    -- Not: Uygulama düzeyinde constraint eklenmeli → Bir ülke için yalnızca 1 varsayılan dil olabilir
);

-- model_turu tablosu
-- Amaç: Model türü bilgilerini tutar (ör: Puan esaslı, Seviye esaslı)

CREATE TABLE model_turleri (
    model_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_turu_adi VARCHAR(32)  
);

-- hastane_turleri tablosu
-- Amaç: Hastane türlerini ve hiyerarşik yapısını tanımlar
-- ? devlet veya özel hastane mi?

CREATE TABLE hastane_turleri (
    hastane_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_hastane_turu_id INTEGER,    -- recursive FK (dil desteği)
    hastane_turu_adi VARCHAR(128),
    dil_adi VARCHAR(64)             
);

-- kullanici_turleri tablosu
-- Amaç: Kullanıcı türlerini ve açıklamalarını saklar

CREATE TABLE kullanici_turleri (
    kullanici_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_kullanici_turu_id INTEGER,   -- recursive FK (dil desteği)
    kullanici_turu_adi VARCHAR(64),
    aciklama TEXT,
    dil_adi VARCHAR(64)              
);


-- seviyeler tablosu
-- Aynı seviye, farklı dillerde gösterilebilir (örn: 'Seviye 1' → 'Level 1')

CREATE TABLE seviyeler (
    seviye_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_seviye_id INTEGER,      -- recursive FK (dil desteği)
    seviye_adi VARCHAR(32),     
    dil_adi VARCHAR(64)         
);



-- modeller tablosu 

CREATE TABLE modeller (
    model_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_model_id INTEGER,             -- recursive FK (dil desteği)
    model_turu_id INTEGER,            -- FK model_turu tablosu
    model_resmi_adi VARCHAR(128),     
    model_alias_adi VARCHAR(128),
    model_kodu VARCHAR(20),
    model_aciklama TEXT,
	kullanici_kapsami VARCHAR(32),  -- 'Tek' veya 'Coklu' değerleri
    aktif SMALLINT,                    -- 0: pasif, 1: aktif, 2: taslak
    devreye_alma_tarihi DATE,
    devreden_kaldirilma_tarihi DATE,
    dil_adi VARCHAR(64)               
);


/* ---------------------------------------------
- ust_model_id(recursive FK) Kendi kendine bağlanır 
- ON DELETE SET NULL: Üst model silinirse, alt modeller kopmaz ama ust_model_id boş kalır
- ON UPDATE CASCADE: Üst modelin model_id'si değişirse (normalde değişmez ama güvenlik için), bağlı alt modeller de güncellenir
-- NOT NULL: kaldırıldı (geliştirme aşamasında esnek kalsın)
--------------------------------------------- */

-- model_ulke tablosu
-- Amaç: Bir modelin hangi ülkelerde devreye alındığını ve aktiflik durumunu izlemek.
-- Bu yapı sayesinde model bazlı ülke yayılımı, dil ve geçerlilik kontrolü sağlanır.

CREATE TABLE model_ulke (
    model_ulke_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ulke_id INTEGER,                -- FK: ulkeler tablosu
    model_id INTEGER,               -- FK: modeller tablosu
    devreye_alma_tarihi DATE,       -- Modelin ilgili ülkedeki devreye giriş tarihi
    dil_adi VARCHAR(64),            -- Modelin bu ülkede kullanılacağı dil (görsel/tanımlayıcı amaçlı)
    aktif BOOLEAN  --DEFAULT FALSE  -- 0: atanmış ama geçerli değil, 1: devrede
    -- Not: İlk kayıt açıldığında aktif=false olarak gelir, manuel onay süreci sonunda aktif=true yapılır
);


-- model_seviye tablosu
-- Amaç: Her modelin sahip olabileceği seviyeleri ilişkilendirmek için kullanılır.

CREATE TABLE model_seviye (
    model_seviye_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_id INTEGER,      -- FK: modeller tablosu
    seviye_id INTEGER       -- FK: seviyeler tablosu
);



-- model_hastane_turu tablosu
-- Amaç: Modellerin hangi hastane türlerine uygulanabilir olduğunu tanımlar.
-- N-N ilişki yapısı kurulur: bir model birden fazla hastane türüne, bir hastane türü birden fazla modele ait olabilir.

CREATE TABLE model_hastane_turu (
    model_hastane_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_id INTEGER,            -- FK: modeller tablosu
    hastane_turu_id INTEGER      -- FK: hastane_turleri tablosu
);


-- model_kullanici_kapsami tablosu
-- Amaç: Bir modelin hangi kullanıcı türlerine göre özelleştirileceğini tanımlar.
-- N-N ilişki kurulur: bir model birden fazla kullanıcı türünü kapsayabilir.

CREATE TABLE model_kullanici_kapsami (
    model_kullanici_kapsami_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    kullanici_turu_id INTEGER,  -- FK: kullanici_turleri tablosu
    model_id INTEGER             -- FK: modeller tablosu
);


-- boyutlar tablosu
-- Amaç: Modellerin yapısal bileşenleri olan boyutları tanımlar.

CREATE TABLE boyutlar (
    boyut_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_boyut_id INTEGER,              -- recursive FK (dil desteği)
    boyut_id_hiyerarsi INTEGER,        
    boyut_adi VARCHAR(255) ,   		
    boyut_allias VARCHAR(255) ,		
    boyut_etiketleri TEXT,             
    hiyerarsi INTEGER,                 -- Frontend TreeView bileşeni için hiyerarşik seviye (görsel)
    aktif SMALLINT,                    -- 0: pasif, 1: aktif, 2: taslak
    dil_adi VARCHAR(64)                -- Çok dilli destek
);

/*
ust_boyut_id INTEGER,
 Aynı boyutun farklı dildeki karşılıklarını birbirine bağlar (recursive FK).
 Örn: "Patient Safety" → "Hasta Güvenliği"
 Ana boyut, Türkçe tanım olur; diğer diller üst boyuta referans verir.

boyut_id_hiyerarsi INTEGER,
 Boyutlar arası hiyerarşik bağlantıyı kurar (kategori / alt kategori).
 Örn: "Hasta Güvenliği" alt boyut olarak "Kalite Yönetimi"ne bağlıysa, burada o üst boyutun ID’si yazılır.
 Frontend TreeView ve yapısal filtreleme için kullanılır.
*/



-- kriterler tablosu
-- Amaç: Boyutlara bağlı değerlendirilecek kriterleri tanımlar.

CREATE TABLE kriterler (
    kriter_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_kriter_id INTEGER,          -- recursive FK (dil desteği)
    kriter_adi TEXT,                
    kriter_alias VARCHAR(128),       
    kriter_etiketleri TEXT,         
    dil_adi VARCHAR(64),            
    aktif SMALLINT                  -- 0: pasif, 1: aktif, 2: taslak
);



-- gostergeler tablosu
-- Amaç: Kriterlere bağlı değerlendirici soruların (göstergelerin) tanımını yapar.

CREATE TABLE gostergeler (
    gosterge_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_gosterge_id INTEGER,           -- recursive FK (dil desteği)
	gosterge_adi TEXT ,             
    gosterge_allias VARCHAR(255),      
    gosterge_etiketleri TEXT,          
    gosterge_aciklamasi TEXT,          
    gosterge_ornek_uygulama TEXT,      
    dil_adi VARCHAR(64), 
    aktif SMALLINT                     -- 0: pasif, 1: aktif, 2: taslak
);


-- gosterge_cevap_turleri tablosu
-- Amaç: Göstergelere ait cevap türlerini tanımlar (ör: Evet/Hayır, Likert vb.)

CREATE TABLE gosterge_cevap_turleri (
    gosterge_cevap_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    gosterge_cevap_turu VARCHAR(64) 
    
);


-- gosterge_cevap_sablonlari tablosu
-- Amaç: Göstergelere bağlı ön tanımlı cevap şablonlarını tanımlar.
-- Aynı gösterge için farklı cevap türlerinde (Likert, Evet/Hayır vb.) farklı şablonlar oluşturulabilir.

CREATE TABLE gosterge_cevap_sablonlari (
    gosterge_cevap_sablonu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_gosterge_cevap_sablonu_id INTEGER, -- recursive FK (dil desteği)
    gosterge_cevap_turu_id INTEGER,        -- FK: gosterge_cevap_turu tablosu
    gosterge_cevap_sablon_adi VARCHAR(64), 
    gosterge_cevap_adi VARCHAR(128),        
    gosterge_cevap_puani INTEGER,          
    dil_adi VARCHAR(64)
);


-- gosterge_cevaplari tablosu
-- Amaç: Modelde kullanılacak göstergelerin cevaplarını tanımlar.
-- Cevaplar kullanıcı türüne göre farklılık gösterebilir. Puanlama, gösterim sırası ve önem düzeyi içerir.

CREATE TABLE gosterge_cevaplari (
    gosterge_cevap_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_gosterge_cevap_id INTEGER,       -- recursive FK (dil desteği)
    gosterge_id INTEGER,                 -- FK: gostergeler  tablosu
    gosterge_cevap_turu_id INTEGER,      -- FK: gosterge_cevap_turu tablosu
    kullanici_turu_id INTEGER,           -- FK: kullanici_turleri tablosu
    gosterge_cevap_onemi VARCHAR(32),    -- Minör, Majör, Zorunlu vb.
    gosterge_cevap_adi VARCHAR(128),      -- Seçenek metni
    gosterge_cevap_puani INTEGER,        -- Bu seçeneğe karşılık gelen puan
    gosterim_sirasi SMALLINT,             -- UI’da gösterim sırası ? eslesmeler tablosunda da var
    dil_adi VARCHAR(50),
    aktif SMALLINT                       -- 0: pasif, 1: aktif, 2: taslak
);


-- gosterge_cevabina_oneriler tablosu
-- Amaç: Belirli bir gösterge cevabı için kullanıcıya önerilen iyileştirme veya örnek uygulama cümlelerini tanımlar.
-- Her kullanıcı türü için farklı öneriler sunulabilir. Çok dilli destek içerir.

CREATE TABLE gosterge_cevabina_oneriler (
    gosterge_cevabina_oneriler_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_gosterge_cevabina_oneriler_id INTEGER,  -- recursive FK (dil desteği)
    gosterge_cevap_id INTEGER,                  -- FK: gosterge_cevaplari tablosu
    kullanici_turu_id INTEGER,                  -- FK: kullanici_turleri tablosu
    gosterge_cevabina_oneri TEXT,      
    dil_adi VARCHAR(64)                         
);


-- eslesmeler tablosu
-- Amaç: Model, boyut, kriter, gösterge ve ilgili cevapların sistemde nasıl eşleştiğini tanımlar.

CREATE TABLE eslesmeler (
    eslesme_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_id INTEGER,                           -- FK: modeller tablosu
    boyut_id INTEGER,                           -- FK: boyutlar tablosu
    kriter_id INTEGER,                          -- FK: kriterler tablosu
    seviye_id INTEGER,                          -- FK: seviyeler (karşılanma düzeyi için) tablosu
    gosterge_id INTEGER,                        -- FK: gostergeler tablosu
    gosterge_cevap_id INTEGER,                  -- FK: gosterge_cevaplari tablosu
    gosterge_cevabina_oneriler_id INTEGER,      -- FK: gosterge_cevabina_oneriler tablosu
    kullanici_turu_id INTEGER,                  -- FK: kullanici_turleri tablosu
    turu VARCHAR(64),                           -- Eşleşme türü → 'Model', 'Boyut', 'Kriter' vb.
    agirligi INTEGER,                           -- Ağırlık değeri (puanlama/öncelik için)
    gosterim_sirasi SMALLINT,                   -- Görsel sıralama için
    aciklama TEXT,
    aktif SMALLINT                              -- 0: pasif, 1: aktif, 2: taslak
);


-- karsilanma_duzeyi tablosu
-- Amaç: Eşleşmelerin hangi puan aralıklarında hangi seviyeyi veya metinsel karşılanma düzeyini temsil ettiğini tanımlar.

CREATE TABLE karsilanma_duzeyi (
    karsilanma_duzeyi_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_karsilanma_duzeyi_id INTEGER,            -- recursive FK (dil desteği)
    eslesme_id INTEGER,                          -- FK: eslesmeler tablosu
    seviye_id INTEGER,                           -- FK: seviyeler (opsiyonel: karşılık gelen seviye)
    turu VARCHAR(64),                            -- 'Model', 'Boyut', 'Kriter' vb.
    maksimum_puan INTEGER,
    minimum_puan INTEGER,
    karsilanma_duzeyi VARCHAR(64),              -- Örnek: 'Tamamen Karşılıyor'
    dil_adi VARCHAR(64)                         
);



/*  TABLOLARIN FOREIGN KEY ALANLARININ EKLENMESİ */



/* sehirler TABLOSUNA FOREIGN KEY EKLEMEK */

--  sehirler -> ulkeler icin foreign key ekle
ALTER TABLE sehirler
  ADD CONSTRAINT fk_sehirler_ulkeler_ulke_id
  FOREIGN KEY (ulke_id) REFERENCES ulkeler(ulke_id)
  ON DELETE RESTRICT;          


/* ulke_dil TABLOSUNA FOREIGN KEY EKLEMEK 
-- ulkedil: ulke_dil tablosu icin kisaltma */

-- ulke_dil -> ulkeler için foreign key ekle
ALTER TABLE ulke_dil
ADD CONSTRAINT fk_ulkedil_ulkeler_ulke_id
FOREIGN KEY (ulke_id) REFERENCES ulkeler(ulke_id)
ON DELETE RESTRICT;

-- ulke_dil ->  diller için foreign key ekle
ALTER TABLE ulke_dil
ADD CONSTRAINT fk_ulkedil_diller_dil_id
FOREIGN KEY (dil_id) REFERENCES diller(dil_id)
ON DELETE RESTRICT;

-- ? Model turleri tablosu icin recursive baglanti gerekli mi?

/* hastane_turleri TABLOSUNA FOREIGN KEY EKLEMEK 
 hastur: hastane_turleri tablosu icin kisaltma */

-- hastane_turleri -> dil destegi icin recursive foreign key
ALTER TABLE hastane_turleri
ADD CONSTRAINT fk_hastur_ust_hastane_turu_id
FOREIGN KEY (ust_hastane_turu_id) REFERENCES hastane_turleri(hastane_turu_id)
ON DELETE RESTRICT;        

/* kullanici_turleri TABLOSUNA FOREIGN KEY EKLEMEK 
 kultur: kullanici_turleri tablosu icin kisaltma */

-- kullanici_turleri -> dil destegi icin recursive foreign key
ALTER TABLE kullanici_turleri
ADD CONSTRAINT fk_kultur_ust_kullanici_turu_id
FOREIGN KEY (ust_kullanici_turu_id) REFERENCES kullanici_turleri(kullanici_turu_id)
ON DELETE RESTRICT;       


/* seviyeler TABLOSUNA FOREIGN KEY EKLEMEK */

ALTER TABLE seviyeler
ADD CONSTRAINT fk_seviyeler_ust_seviye_id
FOREIGN KEY (ust_seviye_id) REFERENCES seviyeler(seviye_id)
ON DELETE RESTRICT;


/* modeller TABLOSUNA FOREIGN KEY EKLEMEK 
-- modtur: modeller tablosu icin kisaltma */

-- modeller -> dil destegi icin recursive foreign key
ALTER TABLE modeller
ADD CONSTRAINT fk_modeller_ust_model_id
FOREIGN KEY (ust_model_id) REFERENCES modeller(model_id)
ON DELETE RESTRICT;    

-- modeller -> model_turleri icin foreign key
ALTER TABLE modeller
ADD CONSTRAINT fk_modeller_modtur_model_turu_id
FOREIGN KEY (model_turu_id) REFERENCES model_turleri(model_turu_id)
ON DELETE RESTRICT;


/* model_ulke TABLOSUNA FOREIGN KEY EKLEMEK 
-- modulke: model_ulke tablosu icin kisaltma */

-- model_ulke -> ulkeler icin foreign key
ALTER TABLE model_ulke
  ADD CONSTRAINT fk_modulke_ulkeler_ulke_id
  FOREIGN KEY (ulke_id) REFERENCES ulkeler(ulke_id)
  ON DELETE RESTRICT;

-- model_ulke -> modeller icin foreign key
ALTER TABLE model_ulke
  ADD CONSTRAINT fk_modulke_modeller_model_id
  FOREIGN KEY (model_id) REFERENCES modeller(model_id)
  ON DELETE RESTRICT;


/* model_seviye TABLOSUNA FOREIGN KEY EKLEMEK 
-- modseviye: model_seviye tablosu icin kisaltma */

-- model_seviye -> modeller icin foreign key
ALTER TABLE model_seviye
  ADD CONSTRAINT fk_modseviye_modeller_model_id
  FOREIGN KEY (model_id) REFERENCES modeller(model_id)
  ON DELETE RESTRICT;

-- model_seviye -> seviyeler icin foreign key
ALTER TABLE model_seviye
  ADD CONSTRAINT fk_modseviye_seviyeler_seviye_id
  FOREIGN KEY (seviye_id) REFERENCES seviyeler(seviye_id)
  ON DELETE RESTRICT;


/* model_hastane_turu TABLOSUNA FOREIGN KEY EKLEMEK 
-- modhastur: model_hastane_turu tablosu icin kisaltma 
-- hastur: hastane_turleri tablosu icin kisaltma */

-- model_hastane_turu -> modeller icin foreign key
ALTER TABLE model_hastane_turu
  ADD CONSTRAINT fk_modhastur_modeller_model_id
  FOREIGN KEY (model_id) REFERENCES modeller(model_id)
  ON DELETE RESTRICT;

-- model_hastane_turu -> hastane_turleri icin foreign key
ALTER TABLE model_hastane_turu
  ADD CONSTRAINT fk_modhastur_hastur_hastane_turu_id
  FOREIGN KEY (hastane_turu_id) REFERENCES hastane_turleri(hastane_turu_id)
  ON DELETE RESTRICT;


/* model_kullanici_kapsami TABLOSUNA FOREIGN KEY EKLEMEK 
-- modkulkapsam: model_kullanici_kapsami tablosu icin kisaltma 
-- kultur: kullanici_turleri tablosu icin kisaltma */

-- model_kullanici_kapsami -> modeller icin foreign key
ALTER TABLE model_kullanici_kapsami
  ADD CONSTRAINT fk_modkulkapsam_modeller_model_id
  FOREIGN KEY (model_id) REFERENCES modeller(model_id)
  ON DELETE RESTRICT;

-- model_kullanici_kapsami -> kullanici_turleri icin foreign key
ALTER TABLE model_kullanici_kapsami
  ADD CONSTRAINT fk_modkulkapsam_kultur_kullanici_turu_id
  FOREIGN KEY (kullanici_turu_id) REFERENCES kullanici_turleri(kullanici_turu_id)
  ON DELETE RESTRICT;


/* boyutlar TABLOSUNA FOREIGN KEY EKLEMEK */

-- boyutlar -> dil destegi icin recursive foreign key
ALTER TABLE boyutlar
  ADD CONSTRAINT fk_boyutlar_ust_boyut_id
  FOREIGN KEY (ust_boyut_id) REFERENCES boyutlar(boyut_id)
  ON DELETE RESTRICT;

-- boyutlar -> hiyerarsi icin reccursive foreign key
ALTER TABLE boyutlar
  ADD CONSTRAINT fk_boyutlar_boyut_id_hiyerarsi
  FOREIGN KEY (boyut_id_hiyerarsi) REFERENCES boyutlar(boyut_id)
  ON DELETE RESTRICT;


/* kriterler TABLOSUNA FOREIGN KEY EKLEMEK */

-- kriterler -> dil destegi icin recursive foreign key
ALTER TABLE kriterler
  ADD CONSTRAINT fk_kriterler_ust_kriter_id
  FOREIGN KEY (ust_kriter_id) REFERENCES kriterler(kriter_id)
  ON DELETE RESTRICT;


/* gostergeler TABLOSUNA FOREIGN KEY EKLEMEK */

-- gostergeler -> dil destegi icin recursive foreign key
ALTER TABLE gostergeler
  ADD CONSTRAINT fk_gostergeler_ust_gosterge_id
  FOREIGN KEY (ust_gosterge_id) REFERENCES gostergeler(gosterge_id)
  ON DELETE RESTRICT;


/* gosterge_cevap_sablonlari TABLOSUNA FOREIGN KEY EKLEMEK 
-- goscvpsablon: gosterge_cevap_sablonlari tablosu icin kisaltma 
-- goscvptur: gosterge_cevap_turleri tablosu icin kisaltma */

-- gosterge_cevap_sablonu -> dil destegi icin recursive foreign key
ALTER TABLE gosterge_cevap_sablonlari
  ADD CONSTRAINT fk_goscvpsablon_ust_gosterge_cevap_sablonu_id
  FOREIGN KEY (ust_gosterge_cevap_sablonu_id)
  REFERENCES gosterge_cevap_sablonlari(gosterge_cevap_sablonu_id)
  ON DELETE RESTRICT;

-- gosterge_cevap_sablonlari -> gosterge_cevap_turleri icin foreign key
ALTER TABLE gosterge_cevap_sablonlari
  ADD CONSTRAINT fk_goscvpsablon_goscvptur_gosterge_cevap_turu_id
  FOREIGN KEY (gosterge_cevap_turu_id)
  REFERENCES gosterge_cevap_turleri(gosterge_cevap_turu_id)
  ON DELETE RESTRICT;


/* gosterge_cevaplari TABLOSUNA FOREIGN KEY EKLEMEK 
-- goscevap: gosterge_cevaplari tablosu icin kisaltma 
-- goscvptur: gosterge_cevap_turleri tablosu icin kisaltma 
-- kultur: kullanici_turleri tablosu icin kisaltma */

-- gosterge_cevaplari -> dil destegi icin recursive foreign key
ALTER TABLE gosterge_cevaplari
  ADD CONSTRAINT fk_goscevap_ust_gosterge_cevap_id
  FOREIGN KEY (ust_gosterge_cevap_id)
  REFERENCES gosterge_cevaplari(gosterge_cevap_id)
  ON DELETE RESTRICT;

-- gosterge_cevaplari -> gostergeler icin foreign key
ALTER TABLE gosterge_cevaplari
  ADD CONSTRAINT fk_goscevap_gostergeler_gosterge_id
  FOREIGN KEY (gosterge_id)
  REFERENCES gostergeler(gosterge_id)
  ON DELETE CASCADE;

-- gosterge_cevaplari -> gosterge_cevap_turleri icin foreign key
ALTER TABLE gosterge_cevaplari
  ADD CONSTRAINT fk_goscevap_goscvptur_gosterge_cevap_turu_id
  FOREIGN KEY (gosterge_cevap_turu_id)
  REFERENCES gosterge_cevap_turleri(gosterge_cevap_turu_id)
  ON DELETE RESTRICT;

-- gosterge_cevaplari -> kullanici_turleri icin foreign key
ALTER TABLE gosterge_cevaplari
  ADD CONSTRAINT fk_goscevap_kultur_kullanici_turu_id
  FOREIGN KEY (kullanici_turu_id)
  REFERENCES kullanici_turleri(kullanici_turu_id)
  ON DELETE RESTRICT;


/* gosterge_cevabina_oneriler TABLOSUNA FOREIGN KEY EKLEMEK
-- goscvponeri : gosterge_cevabina_oneriler tablosu icin kisaltma
-- kultur : kullanici_turleri tablosu icin kisaltma */

-- gosterge_cevabina_oneriler -> dil destegi icin recursive foreign key
ALTER TABLE gosterge_cevabina_oneriler
  ADD CONSTRAINT fk_goscvponeri_ust_gosterge_cevabina_oneriler_id
  FOREIGN KEY (ust_gosterge_cevabina_oneriler_id)
  REFERENCES gosterge_cevabina_oneriler(gosterge_cevabina_oneriler_id)
  ON DELETE RESTRICT;

-- gosterge_cevabina_oneriler -> gosterge_cevaplari icin foreign key
ALTER TABLE gosterge_cevabina_oneriler
  ADD CONSTRAINT fk_goscvponeri_goscevap_gosterge_cevap_id
  FOREIGN KEY (gosterge_cevap_id)
  REFERENCES gosterge_cevaplari(gosterge_cevap_id)
  ON DELETE RESTRICT;

-- gosterge_cevabina_oneriler -> kullanici_turleri icin foreign key
ALTER TABLE gosterge_cevabina_oneriler
  ADD CONSTRAINT fk_goscvponeri_kultur_kullanici_turu_id
  FOREIGN KEY (kullanici_turu_id)
  REFERENCES kullanici_turleri(kullanici_turu_id)
  ON DELETE RESTRICT;


/* eslesmeler TABLOSUNA FOREIGN KEY EKLEMEK 
-- goscevap: gosterge_cevaplari tablosu icin kisaltma 
-- goscvponeri: gosterge_cevabina_oneriler tablosu icin kisaltma 
-- kultur: kullanici_turleri tablosu icin kisaltma */

-- eslesmeler -> modeller icin foreign key
ALTER TABLE eslesmeler
  ADD CONSTRAINT fk_eslesmeler_modeller_model_id
  FOREIGN KEY (model_id)
  REFERENCES modeller(model_id)
  ON DELETE RESTRICT;

-- eslesmeler -> boyutlar icin foreign key
ALTER TABLE eslesmeler
  ADD CONSTRAINT fk_eslesmeler_boyutlar_boyut_id
  FOREIGN KEY (boyut_id)
  REFERENCES boyutlar(boyut_id)
  ON DELETE RESTRICT;

-- eslesmeler -> kriterler icin foreign key
ALTER TABLE eslesmeler
  ADD CONSTRAINT fk_eslesmeler_kriterler_kriter_id
  FOREIGN KEY (kriter_id)
  REFERENCES kriterler(kriter_id)
  ON DELETE RESTRICT;

-- eslesmeler -> seviyeler icin foreign key
ALTER TABLE eslesmeler
  ADD CONSTRAINT fk_eslesmeler_seviyeler_seviye_id
  FOREIGN KEY (seviye_id)
  REFERENCES seviyeler(seviye_id)
  ON DELETE RESTRICT;

-- eslesmeler -> gostergeler icin foreign key
ALTER TABLE eslesmeler
  ADD CONSTRAINT fk_eslesmeler_gostergeler_gosterge_id
  FOREIGN KEY (gosterge_id)
  REFERENCES gostergeler(gosterge_id)
  ON DELETE RESTRICT;

-- eslesmeler -> gosterge_cevaplari icin foreign key
ALTER TABLE eslesmeler
  ADD CONSTRAINT fk_eslesmeler_goscevap_gosterge_cevap_id
  FOREIGN KEY (gosterge_cevap_id)
  REFERENCES gosterge_cevaplari(gosterge_cevap_id)
  ON DELETE RESTRICT;

-- eslesmeler -> gosterge_cevabina_oneriler icin foreign key 
ALTER TABLE eslesmeler
  ADD CONSTRAINT fk_eslesmeler_goscvponeri_gosterge_cevabina_oneriler_id
  FOREIGN KEY (gosterge_cevabina_oneriler_id)
  REFERENCES gosterge_cevabina_oneriler(gosterge_cevabina_oneriler_id)
  ON DELETE RESTRICT;

-- eslesmeler -> kullanici_turleri icin foreign key
ALTER TABLE eslesmeler
  ADD CONSTRAINT fk_eslesmeler_kultur_kullanici_turu_id
  FOREIGN KEY (kullanici_turu_id)
  REFERENCES kullanici_turleri(kullanici_turu_id)
  ON DELETE RESTRICT;

/* karsilanma_duzeyi TABLOSUNA FOREIGN KEY EKLEMEK 
-- karduzeyi: karsilanma_duzeyi tablosu icin kisaltma */

-- karsilanma_duzeyi -> dil destegi icin recursive foreign key
ALTER TABLE karsilanma_duzeyi
  ADD CONSTRAINT fk_karduzeyi_ust_karsilanma_duzeyi_id
  FOREIGN KEY (ust_karsilanma_duzeyi_id)
  REFERENCES karsilanma_duzeyi(karsilanma_duzeyi_id)
  ON DELETE RESTRICT;

-- karsilanma_duzeyi -> eslesmeler icin foreign key
ALTER TABLE karsilanma_duzeyi
  ADD CONSTRAINT fk_karduzeyi_eslesmeler_eslesme_id
  FOREIGN KEY (eslesme_id)
  REFERENCES eslesmeler(eslesme_id)
  ON DELETE RESTRICT;

-- karsilanma_duzeyi -> seviyeler icin foreign key
ALTER TABLE karsilanma_duzeyi
  ADD CONSTRAINT fk_karduzeyi_seviyeler_seviye_id
  FOREIGN KEY (seviye_id)
  REFERENCES seviyeler(seviye_id)
  ON DELETE RESTRICT;


-- DATA

/* diller tablosuna veri ekle */
INSERT INTO diller (dil_adi) VALUES 
('Türkçe'),
('English'),
('Español'),
('Arabic');


/* ulkeler tablosuna veri ekle */
INSERT INTO ulkeler (ulke_adi) VALUES 
('Türkiye'),
('USA'),
('Spain'),
('Saudi Arabia');


/* sehirler tablosuna veri ekle */
INSERT INTO sehirler (ulke_id, sehir_adi, bolge_adi, nuts_adi) VALUES 
(1, 'İstanbul', 'Marmara', 'TR10'),
(1, 'Ankara', 'İç Anadolu', 'TR51'),
(2, 'London', 'Greater London', 'UKI'),
(3, 'Madrid', 'Comunidad de Madrid', 'ES30'),
(4, 'Riyadh', 'Riyadh', 'SA10');


/* ulke_dil tablosuna veri ekle */
INSERT INTO ulke_dil (ulke_id, dil_id, varsayilan) VALUES 
(1, 1, TRUE),     -- Türkiye → Türkçe
(2, 2, TRUE),     -- İngiltere → English
(3, 3, TRUE),     -- İspanya → Español
(4, 4, TRUE),     -- Suudi Arabistan → Arabic
(1, 2, FALSE),    -- Türkiye → English (ikincil dil)
(3, 2, FALSE), -- İspanya → English (ikincil dil)
(4, 2, FALSE);    -- Suudi Arabistan → English (ikincil dil)


/* model_turleri tablosuna veri ekle */
INSERT INTO model_turleri (model_turu_adi) VALUES 
('Puan Esaslı'),
('Seviye Esaslı');

/* --------------------------------
-- ulke dil join

SELECT 
    u.ulke_adi AS "Ülke",
    d.dil_adi AS "Dil",
    CASE 
        WHEN ud.varsayilan = FALSE THEN 'Hayır'
        WHEN ud.varsayilan = TRUE THEN 'Evet'
        ELSE 'Bilinmiyor'
    END AS "Varsayılan dil mi?"
FROM 
    ulke_dil ud
JOIN 
    ulkeler u ON u.ulke_id = ud.ulke_id
JOIN 
    diller d ON d.dil_id = ud.dil_id
ORDER BY 
    u.ulke_adi, ud.varsayilan DESC;
-------------------------------- */


/* hastane_turleri tablosuna veri ekle */

-- turkce verileri ekle
INSERT INTO hastane_turleri (ust_hastane_turu_id, hastane_turu_adi, dil_adi) VALUES
(NULL, 'Fizik Tedavi ve Rehabilitasyon Hastanesi', 'Türkçe'),
(NULL, 'Araştırma Hastanesi', 'Türkçe'),
(NULL, 'Ağız ve Diş Sağlığı Merkezi', 'Türkçe'),
(NULL, 'Göz Hastanesi', 'Türkçe'),
(NULL, 'Kadın Doğum Hastanesi', 'Türkçe');


-- 'Fizik Tedavi ve Rehabilitasyon Hastanesi'
WITH base AS (
  SELECT hastane_turu_id
  FROM hastane_turleri
  WHERE hastane_turu_adi = 'Fizik Tedavi ve Rehabilitasyon Hastanesi'
    AND dil_adi = 'Türkçe'
)

INSERT INTO hastane_turleri (ust_hastane_turu_id, hastane_turu_adi, dil_adi)
SELECT base.hastane_turu_id, tr.adi, tr.dil
FROM base,
     (VALUES
        ('Physical Therapy and Rehabilitation Hospital', 'English'),
        ('Hospital de Fisioterapia y Rehabilitación', 'Español'),
        ('مستشفى العلاج الطبيعي وإعادة التأهيل', 'Arabic')
     ) AS tr(adi, dil);

-- ARAŞTIRMA HASTANESİ çevirileri
WITH base AS (
  SELECT hastane_turu_id
  FROM hastane_turleri
  WHERE hastane_turu_adi = 'Araştırma Hastanesi' AND dil_adi = 'Türkçe'
)
INSERT INTO hastane_turleri (ust_hastane_turu_id, hastane_turu_adi, dil_adi)
SELECT base.hastane_turu_id, val.adi, val.dil
FROM base,
     (VALUES
        ('Research Hospital', 'English'),
        ('Hospital de Investigación', 'Español'),
        ('مستشفى البحوث', 'Arabic')
     ) AS val(adi, dil);

-- AĞIZ VE DİŞ SAĞLIĞI MERKEZİ çevirileri
WITH base AS (
  SELECT hastane_turu_id
  FROM hastane_turleri
  WHERE hastane_turu_adi = 'Ağız ve Diş Sağlığı Merkezi' AND dil_adi = 'Türkçe'
)
INSERT INTO hastane_turleri (ust_hastane_turu_id, hastane_turu_adi, dil_adi)
SELECT base.hastane_turu_id, val.adi, val.dil
FROM base,
     (VALUES
        ('Oral and Dental Health Center', 'English'),
        ('Centro de Salud Oral y Dental', 'Español'),
        ('مركز صحة الفم والأسنان', 'Arabic')
     ) AS val(adi, dil);

-- GÖZ HASTANESİ çevirileri
WITH base AS (
  SELECT hastane_turu_id
  FROM hastane_turleri
  WHERE hastane_turu_adi = 'Göz Hastanesi' AND dil_adi = 'Türkçe'
)
INSERT INTO hastane_turleri (ust_hastane_turu_id, hastane_turu_adi, dil_adi)
SELECT base.hastane_turu_id, val.adi, val.dil
FROM base,
     (VALUES
        ('Eye Hospital', 'English'),
        ('Hospital de Ojos', 'Español'),
        ('مستشفى العيون', 'Arabic')
     ) AS val(adi, dil);

-- KADIN DOĞUM HASTANESİ çevirileri
WITH base AS (
  SELECT hastane_turu_id
  FROM hastane_turleri
  WHERE hastane_turu_adi = 'Kadın Doğum Hastanesi' AND dil_adi = 'Türkçe'
)
INSERT INTO hastane_turleri (ust_hastane_turu_id, hastane_turu_adi, dil_adi)
SELECT base.hastane_turu_id, val.adi, val.dil
FROM base,
     (VALUES
        ('Maternity Hospital', 'English'),
        ('Hospital de Maternidad', 'Español'),
        ('مستشفى الولادة', 'Arabic')
     ) AS val(adi, dil);

/* -------------------------------- 
-- hastane turleri cevirileri

SELECT 
    CASE 
        WHEN ust.hastane_turu_adi IS NOT NULL THEN ust.hastane_turu_adi
        ELSE alt.hastane_turu_adi
    END AS "Türkçe Ana Ad",
    alt.hastane_turu_adi AS "Çeviri",
    alt.dil_adi AS "Dil"
FROM hastane_turleri AS alt
LEFT JOIN hastane_turleri AS ust
    ON alt.ust_hastane_turu_id = ust.hastane_turu_id
ORDER BY "Türkçe Ana Ad", alt.dil_adi;


-- -- ustteki kod ile ayni islev fakat daha hizli ilk null degerini dondurur
-- SELECT 
--     COALESCE(ust.hastane_turu_adi, alt.hastane_turu_adi) AS "Türkçe Ana Ad",
--     alt.hastane_turu_adi AS "Çeviri",
--     alt.dil_adi AS "Dil"
-- FROM hastane_turleri AS alt
-- LEFT JOIN hastane_turleri AS ust
--     ON alt.ust_hastane_turu_id = ust.hastane_turu_id
-- ORDER BY "Türkçe Ana Ad", alt.dil_adi;


-------------------------------- */



/* kullanici_turleri tablosuna veri ekle */


-- Türkçe
INSERT INTO kullanici_turleri (ust_kullanici_turu_id, kullanici_turu_adi, aciklama, dil_adi) VALUES
(NULL, 'İdari Personel', 'İdari süreçleri yöneten personel', 'Türkçe'),
(NULL, 'Teknik Personel', 'Teknik destek ve sistem yönetimi', 'Türkçe'),
(NULL, 'Tıbbi Personel', 'Sağlık hizmeti sunan personel', 'Türkçe'),
(NULL, 'Genel', 'Tüm kullanıcı türleri', 'Türkçe');


-- idari personel çevirileri
WITH base AS (
  SELECT kullanici_turu_id FROM kullanici_turleri
  WHERE kullanici_turu_adi = 'İdari Personel' AND dil_adi = 'Türkçe'
)
INSERT INTO kullanici_turleri (ust_kullanici_turu_id, kullanici_turu_adi, aciklama, dil_adi)
SELECT base.kullanici_turu_id, val.adi, val.aciklama, val.dil
FROM base,
     (VALUES
        ('Administrative Staff', 'Staff managing administrative processes', 'English'),
        ('Personal Administrativo', 'Personal que gestiona procesos administrativos', 'Español'),
        ('الموظفون الإداريون', 'الموظفون الذين يديرون العمليات الإدارية', 'Arabic')
     ) AS val(adi, aciklama, dil);



-- teknik personel çevirileri
WITH base AS (
  SELECT kullanici_turu_id FROM kullanici_turleri
  WHERE kullanici_turu_adi = 'Teknik Personel' AND dil_adi = 'Türkçe'
)
INSERT INTO kullanici_turleri (ust_kullanici_turu_id, kullanici_turu_adi, aciklama, dil_adi)
SELECT base.kullanici_turu_id, val.adi, val.aciklama, val.dil
FROM base,
     (VALUES
        ('Technical Staff', 'Responsible for technical support and systems', 'English'),
        ('Personal Técnico', 'Responsable de soporte técnico y sistemas', 'Español'),
        ('الموظفون الفنيون', 'المسؤولون عن الدعم الفني وإدارة النظام', 'Arabic')
     ) AS val(adi, aciklama, dil);


-- tıbbi personel çevirileri
WITH base AS (
  SELECT kullanici_turu_id FROM kullanici_turleri
  WHERE kullanici_turu_adi = 'Tıbbi Personel' AND dil_adi = 'Türkçe'
)
INSERT INTO kullanici_turleri (ust_kullanici_turu_id, kullanici_turu_adi, aciklama, dil_adi)
SELECT base.kullanici_turu_id, val.adi, val.aciklama, val.dil
FROM base,
     (VALUES
        ('Medical Staff', 'Staff providing healthcare services', 'English'),
        ('Personal Médico', 'Personal que presta servicios sanitarios', 'Español'),
        ('الطاقم الطبي', 'الموظفون الذين يقدمون خدمات الرعاية الصحية', 'Arabic')
     ) AS val(adi, aciklama, dil);


-- genel çevirileri
WITH base AS (
  SELECT kullanici_turu_id FROM kullanici_turleri
  WHERE kullanici_turu_adi = 'Genel' AND dil_adi = 'Türkçe'
)
INSERT INTO kullanici_turleri (ust_kullanici_turu_id, kullanici_turu_adi, aciklama, dil_adi)
SELECT base.kullanici_turu_id, val.adi, val.aciklama, val.dil
FROM base,
     (VALUES
        ('General', 'Includes all user types', 'English'),
        ('General', 'Incluye todos los tipos de usuarios', 'Español'),
        ('عام', 'يشمل جميع أنواع المستخدمين', 'Arabic')
     ) AS val(adi, aciklama, dil);

/* --------------------------------
-- Kullanıcı Türleri Çevirileri

SELECT
    CASE
        WHEN ust.kullanici_turu_adi IS NOT NULL THEN ust.kullanici_turu_adi
        ELSE alt.kullanici_turu_adi
    END AS "Türkçe Ana Ad",
    alt.kullanici_turu_adi AS "Çeviri",
    alt.dil_adi AS "Dil"
FROM kullanici_turleri AS alt
LEFT JOIN kullanici_turleri AS ust
    ON alt.ust_kullanici_turu_id = ust.kullanici_turu_id
ORDER BY "Türkçe Ana Ad", alt.dil_adi;

-------------------------------- */


/* seviyeler tablosuna veri ekle */

-- turkce verileri ekle
INSERT INTO seviyeler (ust_seviye_id, seviye_adi, dil_adi) VALUES
(NULL, 'Seviye 1', 'Türkçe'),
(NULL, 'Seviye 2', 'Türkçe'),
(NULL, 'Seviye 3', 'Türkçe'),
(NULL, 'Seviye 4', 'Türkçe'),
(NULL, 'Seviye 5', 'Türkçe'),
(NULL, 'Seviye 6', 'Türkçe'),
(NULL, 'Seviye 7', 'Türkçe'),
(NULL, 'Seviye 8', 'Türkçe'),
(NULL, 'Seviye 9', 'Türkçe'),
(NULL, 'Seviye 10', 'Türkçe');

-- loop ile cevirileri ekleme

-- loop ile veri ekleme

DO $$
DECLARE
    i INT;
    tr_adi TEXT;
    tr_id INT;
BEGIN
    FOR i IN 1..10 LOOP
        -- 1. Türkçe kaydın ID'sini al
        SELECT seviye_id INTO tr_id
        FROM seviyeler
        WHERE seviye_adi = 'Seviye ' || i AND dil_adi = 'Türkçe';

        -- 2. İngilizce, İspanyolca, Arapça çevirileri ekle
        INSERT INTO seviyeler (ust_seviye_id, seviye_adi, dil_adi)
        VALUES
            (tr_id, 'Level ' || i, 'English'),
            (tr_id, 'Nivel ' || i, 'Español'),
            (tr_id, 'المستوى ' || i, 'Arabic');
    END LOOP;
END $$;

/*	-------------------------------- 
-- seviyeler tablosu ceviriler ile
SELECT
    CASE
        WHEN ust.seviye_adi IS NOT NULL THEN ust.seviye_adi
        ELSE alt.seviye_adi
    END AS "Türkçe Ana Ad",
    alt.seviye_adi AS "Çeviri",
    alt.dil_adi AS "Dil"
FROM seviyeler AS alt
LEFT JOIN seviyeler AS ust
    ON alt.ust_seviye_id = ust.seviye_id
ORDER BY "Türkçe Ana Ad", alt.dil_adi;

-------------------------------- */

/* modeller tablosuna veri ekle */

-- turkce verileri ekle
INSERT INTO modeller (
    ust_model_id, model_turu_id, model_resmi_adi, model_alias_adi, model_aciklama,
    kullanici_kapsami, aktif, devreye_alma_tarihi, devreden_kaldirilma_tarihi, dil_adi
) VALUES
(NULL, 2, 'EMRAM', 'EMRAM TR GENEL', 'Elektronik Sağlık Kaydı Modeli', 'Tek', 1, '2022-01-01', NULL, 'Türkçe'),

(NULL, 2, 'O-EMRAM', 'O-EMRAM TR I+T', 'Ayaktan Tedavi EMRAM', 'Tek', 1, '2022-06-15', NULL, 'Türkçe'),

(NULL, 2, 'CCMM', 'CCMM TR TEK', 'Süreklilik Olgunluk Modeli', 'Tek', 1, '2023-01-10', NULL, 'Türkçe'),

(NULL, 2, 'AMAM', 'AMAM TR GENEL', 'Analitik Olgunluk Modeli', 'Coklu', 1, '2023-05-01', NULL, 'Türkçe'),

(NULL, 1, 'SKS', 'SKS TR GENEL', 'Sağlıkta Kalite Standartları', 'Tek', 1, '2021-11-01', NULL, 'Türkçe'),

(NULL, 1, 'SAS', 'SAS TR TASLAK', 'Sağlıkta Akreditasyon Setleri', 'Coklu', 0, '2021-12-01', NULL, 'Türkçe'),

(NULL, 1, 'InnoPerf', 'InnoPerf TR V.1', 'Performans ve Yenilikçilik Modeli', 'Coklu', 2, '2024-01-01', '2025-01-01', 'Türkçe');




-- oto script ile veri ekleme

DO $$
DECLARE
    rec RECORD;
BEGIN
    FOR rec IN
        SELECT * FROM modeller
        WHERE model_resmi_adi IN ('EMRAM', 'O-EMRAM', 'CCMM', 'AMAM', 'InnoPerf')
          AND dil_adi = 'Türkçe'
    LOOP
        IF rec.model_resmi_adi = 'EMRAM' THEN
            INSERT INTO modeller (
                ust_model_id, model_turu_id, model_resmi_adi, model_alias_adi,
                model_aciklama, kullanici_kapsami, aktif,
                devreye_alma_tarihi, devreden_kaldirilma_tarihi, dil_adi
            ) VALUES
                (rec.model_id, rec.model_turu_id, 'EMRAM', 'EMRAM EN GENEL', 'Electronic Medical Record Adoption Model', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'English'),
                (rec.model_id, rec.model_turu_id, 'EMRAM', 'EMRAM ES GENEL', 'Modelo de Adopción de Registros Médicos Electrónicos', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Español'),
                (rec.model_id, rec.model_turu_id, 'EMRAM', 'EMRAM AR GENEL', 'نموذج تبني السجل الطبي الإلكتروني', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Arabic');

        ELSIF rec.model_resmi_adi = 'O-EMRAM' THEN
            INSERT INTO modeller (
                ust_model_id, model_turu_id, model_resmi_adi, model_alias_adi,
                model_aciklama, kullanici_kapsami, aktif,
                devreye_alma_tarihi, devreden_kaldirilma_tarihi, dil_adi
            ) VALUES
                (rec.model_id, rec.model_turu_id, 'O-EMRAM', 'O-EMRAM EN I+T', 'Outpatient EMRAM', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'English'),
                (rec.model_id, rec.model_turu_id, 'O-EMRAM', 'O-EMRAM ES I+T', 'EMRAM para atención ambulatoria', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Español'),
                (rec.model_id, rec.model_turu_id, 'O-EMRAM', 'O-EMRAM AR I+T', 'إي إم رام للعيادات الخارجية', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Arabic');

        ELSIF rec.model_resmi_adi = 'CCMM' THEN
            INSERT INTO modeller (
                ust_model_id, model_turu_id, model_resmi_adi, model_alias_adi,
                model_aciklama, kullanici_kapsami, aktif,
                devreye_alma_tarihi, devreden_kaldirilma_tarihi, dil_adi
            ) VALUES
                (rec.model_id, rec.model_turu_id, 'CCMM', 'CCMM EN T', 'Continuity Care Maturity Model', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'English'),
                (rec.model_id, rec.model_turu_id, 'CCMM', 'CCMM ES T', 'Modelo de Madurez para la Continuidad del Cuidado', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Español'),
                (rec.model_id, rec.model_turu_id, 'CCMM', 'CCMM AR T', 'نموذج نضج رعاية الاستمرارية', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Arabic');

        ELSIF rec.model_resmi_adi = 'AMAM' THEN
            INSERT INTO modeller (
                ust_model_id, model_turu_id, model_resmi_adi, model_alias_adi,
                model_aciklama, kullanici_kapsami, aktif,
                devreye_alma_tarihi, devreden_kaldirilma_tarihi, dil_adi
            ) VALUES
                (rec.model_id, rec.model_turu_id, 'AMAM', 'AMAM EN GENEL', 'Analytics Maturity Assessment Model', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'English'),
                (rec.model_id, rec.model_turu_id, 'AMAM', 'AMAM ES GENEL', 'Modelo de Evaluación de Madurez Analítica', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Español'),
                (rec.model_id, rec.model_turu_id, 'AMAM', 'AMAM AR GENEL', 'نموذج تقييم نضج التحليلات', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Arabic');

        ELSIF rec.model_resmi_adi = 'InnoPerf' THEN
            INSERT INTO modeller (
                ust_model_id, model_turu_id, model_resmi_adi, model_alias_adi,
                model_aciklama, kullanici_kapsami, aktif,
                devreye_alma_tarihi, devreden_kaldirilma_tarihi, dil_adi
            ) VALUES
                (rec.model_id, rec.model_turu_id, 'InnoPerf', 'InnoPerf EN V.1', 'Innovation & Performance Maturity Model', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'English'),
                (rec.model_id, rec.model_turu_id, 'InnoPerf', 'InnoPerf ES V.1', 'Modelo de Madurez en Rendimiento e Innovación', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Español'),
                (rec.model_id, rec.model_turu_id, 'InnoPerf', 'InnoPerf AR V.1', 'نموذج النضج في الأداء والابتكار', rec.kullanici_kapsami, rec.aktif, rec.devreye_alma_tarihi, rec.devreden_kaldirilma_tarihi, 'Arabic');
        END IF;
    END LOOP;
END $$;

/* -------------------------------- 
-- modeller test  

SELECT 
	m.model_resmi_adi AS "Model Adı",
    m.model_alias_adi AS "Model Kısa Adı",
    m.model_aciklama AS "Açıklama",
    m.dil_adi AS "Dil",
    
    CASE m.aktif
        WHEN 1 THEN 'Yayında'
        WHEN 0 THEN 'Taslak'
        WHEN 2 THEN 'Devre Dışı'
        ELSE 'Bilinmiyor'
    END AS "Durum",

    CASE 
        WHEN m.aktif = 2 THEN TO_CHAR(m.devreden_kaldirilma_tarihi, 'DD.MM.YYYY')
        ELSE TO_CHAR(m.devreye_alma_tarihi, 'DD.MM.YYYY')
    END AS "Tarih"

FROM modeller AS m
ORDER BY "Model Adı", "Dil";

-------------------------------- */


/* model_ulke tablosuna test verileri ekle */

-- ingilizce modelleri ekle
INSERT INTO model_ulke (ulke_id, model_id, devreye_alma_tarihi, dil_adi, aktif)
SELECT  u.ulke_id,
        m.model_id,
        COALESCE(m.devreye_alma_tarihi, CURRENT_DATE),
        'English',
        TRUE                                -- İngilizce global atama hep aktif
FROM    ulkeler         u                  -- tüm ülkeler
JOIN    modeller        m  ON m.dil_adi = 'English'
WHERE   m.aktif = 1                         -- sadece Yayında olanlar
ON CONFLICT DO NOTHING;                     -- tekrar çalıştırıldığında çakışma yok


-- ülke dil tablosu ile model_ulke tablosunu birleştir
WITH dil_map AS (
    SELECT dil_id, dil_adi FROM diller
)
INSERT INTO model_ulke (ulke_id, model_id, devreye_alma_tarihi, dil_adi, aktif)
SELECT  ud.ulke_id,
        m.model_id,
        COALESCE(m.devreye_alma_tarihi, CURRENT_DATE),
        m.dil_adi,
        (m.aktif = 1)               -- Yayında → TRUE, Devre Dışı/Taslak → FALSE
FROM    modeller      m
JOIN    dil_map       d   ON d.dil_adi = m.dil_adi
JOIN    ulke_dil      ud  ON ud.dil_id  = d.dil_id
WHERE   m.dil_adi <> 'English'       -- İngilizceler zaten eklendi
ON CONFLICT DO NOTHING;

/* -------------------------------- 
-- modeller ülkeler ve dilleri joinleme
SELECT u.ulke_adi,
       m.model_resmi_adi,
       m.dil_adi,
       mu.aktif
FROM   model_ulke mu
JOIN   ulkeler   u ON u.ulke_id  = mu.ulke_id
JOIN   modeller  m ON m.model_id = mu.model_id
ORDER  BY u.ulke_adi, m.model_resmi_adi, m.dil_adi;
-------------------------------- */

INSERT INTO model_seviye (model_id, seviye_id)
SELECT m.model_id,
       s.seviye_id
FROM   modeller      m
JOIN   model_turleri t ON t.model_turu_id = m.model_turu_id
JOIN   seviyeler     s ON s.dil_adi      = m.dil_adi
WHERE  t.model_turu_adi = 'Seviye Esaslı'               -- sadece level-based
  AND (  s.ust_seviye_id IS NOT NULL                    -- çeviri satırları
      OR (s.ust_seviye_id IS NULL AND m.dil_adi = 'Türkçe') )  -- kök TR
ON CONFLICT DO NOTHING;

/* -------------------------------- 

-- SELECT
--     m.model_resmi_adi,
--     m.dil_adi,
--     s.seviye_adi,
--     u.ulke_adi,
-- CASE WHEN mu.aktif THEN 'Yayında' ELSE 'Taslak' END AS Durum
--           -- son satırda VİRGÜL YOK
-- FROM   model_seviye ms
-- JOIN   modeller    m ON m.model_id  = ms.model_id
-- JOIN   seviyeler   s ON s.seviye_id = ms.seviye_id
-- JOIN   model_ulke  mu ON mu.model_id = m.model_id
-- JOIN   ulkeler     u ON u.ulke_id   = mu.ulke_id
-- ORDER  BY m.model_resmi_adi, m.dil_adi, s.seviye_id;

-- SELECT m.model_resmi_adi,
--        t.model_turu_adi,
--        count(*) AS seviye_sayisi
-- FROM   model_seviye ms
-- JOIN   modeller      m ON m.model_id   = ms.model_id
-- JOIN   model_turleri t ON t.model_turu_id = m.model_turu_id
-- GROUP  BY m.model_resmi_adi, t.model_turu_adi
-- ORDER  BY m.model_resmi_adi;

-------------------------------- */











