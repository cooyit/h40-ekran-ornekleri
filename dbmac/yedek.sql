/* Veritabanı Oluşturma (opsiyonel)              */

CREATE DATABASE hastane40;

/* Tabloları Silme (Varsa)                        */

DROP TABLE IF EXISTS diller CASCADE;
DROP TABLE IF EXISTS ulkeler CASCADE;
DROP TABLE IF EXISTS sehirler CASCADE;
DROP TABLE IF EXISTS modeller CASCADE;
DROP TABLE IF EXISTS boyutlar CASCADE;
DROP TABLE IF EXISTS kriterler CASCADE;
DROP TABLE IF EXISTS gostergeler CASCADE;
DROP TABLE IF EXISTS model_turu CASCADE;
DROP TABLE IF EXISTS seviyeler CASCADE;
DROP TABLE IF EXISTS model_seviye CASCADE;
DROP TABLE IF EXISTS hastane_turleri CASCADE;
DROP TABLE IF EXISTS kullanici_turleri CASCADE;
DROP TABLE IF EXISTS model_hastane_turu CASCADE;
DROP TABLE IF EXISTS model_kullanici_kapsami CASCADE;
DROP TABLE IF EXISTS ulkeler_diller CASCADE;
DROP TABLE IF EXISTS model_ulke CASCADE;
DROP TABLE IF EXISTS gosterge_cevaplari CASCADE;
DROP TABLE IF EXISTS gosterge_cevap_onerileri CASCADE;
DROP TABLE IF EXISTS gosterge_cevap_turu CASCADE;
DROP TABLE IF EXISTS gosterge_cevap_sablonu CASCADE;
DROP TABLE IF EXISTS eslesmeler CASCADE;
DROP TABLE IF EXISTS karsilanma_duzeyi CASCADE;
DROP TABLE IF EXISTS hastaneler CASCADE;
DROP TABLE IF EXISTS kullanicilar CASCADE;
DROP TABLE IF EXISTS roller CASCADE;
DROP TABLE IF EXISTS rol_yetki CASCADE;
DROP TABLE IF EXISTS kullanicilar_roller CASCADE;
DROP TABLE IF EXISTS hastane_model CASCADE;
DROP TABLE IF EXISTS hastane_model_kullanicilar CASCADE;

/* PK veri tipi seçimi hakkında                  */ 

-- `dil_id` sütunu için `INTEGER GENERATED BY DEFAULT AS IDENTITY` kullanıldı.
-- Bunun nedeni:
-- 1. `SERIAL` tipi PostgreSQL’de eski bir yaklaşımdır ve arka planda bir sequence oluşturur ama modern `IDENTITY` yapısı kadar esnek değildir.
-- 2. `GENERATED BY DEFAULT AS IDENTITY` ifadesi SQL standardına uygundur ve PostgreSQL 10+ sürümleriyle önerilen yaklaşımdır.
-- 3. `BY DEFAULT` ifadesi, uygulama tarafından manuel ID atamasına izin verir; bu, bazı özel durumlarda faydalı olabilir.
--    Örneğin test verisi yüklerken veya migration yaparken elle ID vermek istenebilir.
-- 4. `GENERATED ALWAYS` olsaydı, manuel ID atamaları reddedilirdi — bu katı kısıt bazen gereksiz sınırlamalara yol açabilir.
-- Bu nedenle, esneklik ve modern uyumluluk için `BY DEFAULT` tercih edilmiştir.

-- a: id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY
-- b: id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- 'a' ile 'b' aynı işlevin açık ve kısa yazımıdır

/* seçilen veri tipleri ve kapladıkları alan     */

-- int : 4 byte
-- varchar(128) : 1-132 byte

/* Tablolar ve Birincil Anahtar (PK) Oluşumu     */

-- Sütun adları snake_case yapıldı (PostgreSQL’de yaygın, tırnaksız kullanım kolaylığı sağlar).

-- diller tablosu
-- Amaç: Desteklenen dillerin temel listesini tutar (ör: Türkçe, İngilizce, Fransızca)

CREATE TABLE diller (
    dil_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Otomatik artan birincil anahtar
    dil_adi VARCHAR(64) NOT NULL                                  -- Dil adı, örn: 'Türkçe'
);

-- ulkeler tablosu
-- Amaç: Ülkelerin listesini tutar

CREATE TABLE ulkeler (
    ulke_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Otomatik artan birincil anahtar
    ulke_adi VARCHAR(64)                                           -- Ülke adı, örn: 'Türkiye'
);

-- sehirler tablosu
-- Amaç: Her ülkeye bağlı şehirleri tanımlar. Bölge, NUTS gibi sınıflandırma bilgileri içerir.

CREATE TABLE sehirler (
    sehir_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Otomatik artan birincil anahtar
    ulke_id INTEGER,               -- FK: ulkeler tablosuna bağlanır
    sehir_adi VARCHAR(64),         -- Şehir adı, örn: 'İstanbul'
    bolge_adi VARCHAR(64),         -- Bölge bilgisi, örn: 'Marmara'
    nuts_adi VARCHAR(5)            -- Avrupa Birliği NUTS sınıflandırması (varsa)
);

-- ulkeler_diller tablosu
-- Amaç: Her ülkenin birden fazla dili olabilir ama yalnızca bir tanesi varsayılan olabilir.
-- Bu yapı, çok dilli anket desteği için gereklidir.

CREATE TABLE ulkeler_diller (
    ulke_dil_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- Otomatik artan ID
    ulke_id INTEGER,             -- FK: ulkeler.tablosu
    dil_id INTEGER,              -- FK: diller.tablosu
    varsayilan BOOLEAN           -- TRUE ise ülke için varsayılan dil
    -- Not: Uygulama düzeyinde constraint eklenmeli → Bir ülke için yalnızca 1 varsayılan dil olabilir
);

-- model_turu tablosu
-- Amaç: Model türü bilgilerini tutar (ör: Puan esaslı, Seviye esaslı)

CREATE TABLE model_turu (
    model_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_turu_adi VARCHAR(20)  -- Örnek: 'Puan esaslı', 'Seviye esaslı'
);

-- hastane_turleri tablosu
-- Amaç: Hastane türlerini ve hiyerarşik yapısını tanımlar

CREATE TABLE hastane_turleri (
    hastane_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_hastane_turu_id INTEGER,    -- recursive FK (dil desteği)
    hastane_tur_adi VARCHAR(64),
    dil_adi VARCHAR(64)             -- Bu alan çoklu dil desteği için görünümde kullanılabilir
);

-- kullanici_turleri tablosu
-- Amaç: Kullanıcı türlerini ve açıklamalarını saklar

CREATE TABLE kullanici_turleri (
    kullanici_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_kullanici_turu_id INTEGER,   -- recursive FK (dil desteği)
    kullanici_turu_adi VARCHAR(64),
    aciklama TEXT,
    dil_adi VARCHAR(64)              -- Dil seçeneği (çok dilli destek için)
);

-- seviyeler tablosu
-- Aynı seviye, farklı dillerde gösterilebilir (örn: 'Seviye 1' → 'Level 1')
-- ust_seviye_id ile aynı seviye yapısı farklı dilde yeniden tanımlanır

CREATE TABLE seviyeler (
    seviye_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_seviye_id INTEGER,      -- recursive FK: aynı dil veya üst seviye yapıya bağlı
    seviye_adi VARCHAR(64),     
    dil_adi VARCHAR(64)         -- Hangi dilde olduğu (örn: 'Türkçe', 'English')
);

-- modeller tablosu
-- Amaç: Model yapısını ve özelliklerini tanımlar. Kullanıcı kapsamı tartışmalıdır, sadeleştirilebilir.

CREATE TABLE modeller (
    model_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_model_id INTEGER,             -- recursive FK olacak,
    model_turu_id INTEGER,            -- FK model_turu tablosu
    model_resmi_adi VARCHAR(128),     -- NOT NULL kaldırıldı (geliştirme aşamasında esnek kalsın)
    model_alias_adi VARCHAR(128),
    kullanici_kapsami_id VARCHAR(50),  -- ? Gerek var mı? Alternatif olarak sadece ara tablo kullanmak yeterli olabilir
    aktif SMALLINT,                    -- 0: pasif, 1: aktif, 2: taslak
    devreye_alma_tarihi DATE,
    devreden_kaldirilma_tarihi DATE,
    dil_adi VARCHAR(50)               
);

/* ---------------------------------------------
- ust_model_id(recursive FK) Kendi kendine bağlanır 
- ON DELETE SET NULL: Üst model silinirse, alt modeller kopmaz ama ust_model_id boş kalır
- ON UPDATE CASCADE: Üst modelin model_id'si değişirse (normalde değişmez ama güvenlik için), bağlı alt modeller de güncellenir
- NOT NULL: kaldırıldı (geliştirme aşamasında esnek kalsın)
--------------------------------------------- */
